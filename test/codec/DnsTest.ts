/**
 * @license
 * Copyright 2022 Marco Fucci di Napoli (mfucci@gmail.com)
 * SPDX-License-Identifier: Apache-2.0
 */

import assert from "assert";
import { AAAARecord, ARecord, DnsCodec, DnsResponse, PtrRecord, SrvRecord, TxtRecord } from "../../src/codec/DnsCodec";

const DNS_RESPONSE: DnsResponse = {
    transactionId: 0,
    answers: [
        PtrRecord("_services._dns-sd._udp.local", "_matter._tcp.local"),
        PtrRecord("_services._dns-sd._udp.local", "_ID559AF361549A9A2._sub._matter._tcp.local"),
        PtrRecord("_matter._tcp.local", "D559AF361549A9A2-0000000000000009._matter._tcp.local"),
        PtrRecord("_ID559AF361549A9A2._sub._matter._tcp.local", "D559AF361549A9A2-0000000000000009._matter._tcp.local"),
    ],
    additionalRecords: [
        ARecord("DCA632A0295F0000.local", "192.168.200.46"),
        AAAARecord("DCA632A0295F0000.local", "fe80::9580:b733:6f54:9f43"),
        SrvRecord("D559AF361549A9A2-0000000000000009._matter._tcp.local", {priority: 0, weight: 0, port: 5540, target: "DCA632A0295F0000.local" }),
        TxtRecord("D559AF361549A9A2-0000000000000009._matter._tcp.local", ["SII=5000", "SAI=300", "T=1"]),
    ],
}

const RESULT = Buffer.from("000080000000000400000004095f7365727669636573075f646e732d7364045f756470056c6f63616c00000c0001000000780014075f6d6174746572045f746370056c6f63616c00095f7365727669636573075f646e732d7364045f756470056c6f63616c00000c000100000078002c125f4944353539414633363135343941394132045f737562075f6d6174746572045f746370056c6f63616c00075f6d6174746572045f746370056c6f63616c00000c000100000078003621443535394146333631353439413941322d30303030303030303030303030303039075f6d6174746572045f746370056c6f63616c00125f4944353539414633363135343941394132045f737562075f6d6174746572045f746370056c6f63616c00000c000100000078003621443535394146333631353439413941322d30303030303030303030303030303039075f6d6174746572045f746370056c6f63616c001044434136333241303239354630303030056c6f63616c0000010001000000780004c0a8c82e1044434136333241303239354630303030056c6f63616c00001c0001000000780010fe800000000000009580b7336f549f4321443535394146333631353439413941322d30303030303030303030303030303039075f6d6174746572045f746370056c6f63616c000021000100000078001e0000000015a41044434136333241303239354630303030056c6f63616c0021443535394146333631353439413941322d30303030303030303030303030303039075f6d6174746572045f746370056c6f63616c0000100001000000780015085349493d35303030075341493d33303003543d31", "hex");


describe("DnsCodec", () => {
    context("encode", () => {
        it("encodes a message", () => {
            const result = DnsCodec.encodeResponse(DNS_RESPONSE);

            assert.equal(result.toString("hex"), RESULT.toString("hex"));
        });
    });
});
